{"version":3,"sources":["components/Player.js","AddPlayer.js","App.js","serviceWorker.js","index.js"],"names":["Player","_ref","playerTab","deletePlayer","playerList","map","player","react_default","a","createElement","className","key","id","src","photo","alt","name","age","nation","flag","onClick","AddPlayer","stete","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","console","log","state","props","addPlayer","onSubmit","this","htmlFor","type","onChange","Component","App","Math","random","toConsumableArray","concat","filter","AddPlayer_AddPlayer","components_Player","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.559e0563.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Player = ({playerTab, deletePlayer}) => {\n  \n    // console.log(this.props);\n    // const { name, age, nation, flag, photo } = this.props; // destructuring\n\n    const playerList = playerTab.map(player => { // map single player in array\n      return (\n        <div className=\"player\" key={player.id}> \n          <div>\n            <img className=\"photo\" src={player.photo} alt=\"player's pic\" />\n          </div>\n          <div>Name: {player.name}</div>\n          <div>Age: {player.age}</div>\n          <div>Nation: {player.nation}</div>\n          <div>\n            <img className=\"flag\" src={player.flag} alt=\"player's flag\" />\n          </div>\n          <button onClick={() => {deletePlayer(player.id)}}>Delete Player</button> {/*on utilise une arrow function et le double accolades pour invoquer la function que au click*/}\n        </div>\n      );\n    });\n    return(\n      <div className=\"player-list\">\n        {playerList}\n      </div>\n    )\n  }\n\n\nexport default Player;\n","import React, { Component } from 'react'\n\nexport default class AddPlayer extends Component {\n    stete = { \n        name : null,\n        age : null,\n        nation : null,\n        flag : null,\n        photo : null\n    }\n\n    handleChange = (e) => {\n        this.setState({ // on utilise l'id qui a le meme nom de la key \"state\" pour update\n            [e.target.id] : e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state)\n        this.props.addPlayer(this.state) //on passe en props le nouveau player crée avec les données du form \n    }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n            <label htmlFor=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" onChange={this.handleChange} />\n            <label htmlFor=\"age\">Age</label>\n            <input type=\"text\" id=\"age\" onChange={this.handleChange} />\n            <label htmlFor=\"nation\">Nation</label>\n            <input type=\"text\" id=\"nation\" onChange={this.handleChange} />\n            <label htmlFor=\"flag\">Flag</label>\n            <input type=\"text\" id=\"flag\" onChange={this.handleChange} />\n            <label htmlFor=\"photo\">Photo</label>\n            <input type=\"text\" id=\"photo\" onChange={this.handleChange} />\n            <button>Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Player from './components/Player';\nimport './App.css';\nimport AddPlayer from './AddPlayer'\n\n\n\nclass App extends Component {\n  state = {\n    playerTab : [\n      {name:\"Maradona\", age:\"25\", nation:\"Argentina\", flag:\"http://www.worldometers.info/img/flags/ar-flag.gif\", photo:\"https://nst.sky.it/content/dam/static/contentimages/original/sezioni_old/sport/maradona_story/maradona_esordi_argentina.jpg\", id: 1},\n      {name:\"Cruyff\", age:\"23\", nation:\"Netherland\", flag:\"http://www.worldometers.info/img/flags/nl-flag.gif\", photo:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRvVY8ODQhgSr3apZLlYHS28MAhSWIzCXv60J7AyO4MmY1D4VcM\", id: 2},\n      {name:\"Pelé\", age:\"28\", nation:\"Brasil\", flag:\"http://www.worldometers.info/img/flags/br-flag.gif\", photo:\"https://img.bfmtv.com/c/1256/708/992/d05d8e3971bb1c4a5a22edefb8f92.jpg\", id: 3}\n    ]\n  }\n\n  addPlayer = (player) => {\n    console.log(player) // player est le state update dans le form Addplayer\n    player.id = Math.random() // pour generer un id random pour chaque player\n    let playerTab = [...this.state.playerTab, player] //spread operator pour creer une copie du tableau et ajouter le nouveau player\n    this.setState({\n      playerTab: playerTab // le nouveau playerTab est egal au playerTab avec le nouveau player\n    })\n  }\n\n  deletePlayer = (id) => { //pour supprimer une carte à partir de son id\n    console.log(id)\n    let playerTab = this.state.playerTab.filter(player => {\n      return player.id !== id // on filtre le tab pour obtenir un nouveau tab sans l'element avec l'id selectionné\n    })\n    this.setState({\n      playerTab : playerTab\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>My first Players App!</h1>\n        <h2>Welcome!!!</h2>\n        <AddPlayer addPlayer={this.addPlayer} /> {/* props passés au composant addPlayer */}\n        <div className=\"wrap\">\n        <Player playerTab={this.state.playerTab} deletePlayer={this.deletePlayer}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}